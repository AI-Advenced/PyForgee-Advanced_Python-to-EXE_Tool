#!/usr/bin/env python3
"""
Exemple d'application simple pour tester PyForgee
Ce script d√©montre les fonctionnalit√©s de base qu'un utilisateur pourrait vouloir compiler
"""

import os
import sys
import json
import datetime
from pathlib import Path


def get_system_info():
    """R√©cup√®re des informations syst√®me basiques"""
    return {
        "platform": sys.platform,
        "python_version": sys.version,
        "current_directory": os.getcwd(),
        "timestamp": datetime.datetime.now().isoformat(),
        "executable": sys.executable,
        "path_separator": os.sep
    }


def process_file_operations():
    """D√©montre les op√©rations de fichiers"""
    current_dir = Path.cwd()
    
    print(f"üìÅ R√©pertoire actuel: {current_dir}")
    print(f"üìÑ Fichiers Python trouv√©s:")
    
    py_files = list(current_dir.glob("*.py"))
    for i, py_file in enumerate(py_files[:5], 1):  # Limite √† 5 fichiers
        size = py_file.stat().st_size
        print(f"   {i}. {py_file.name} ({size} bytes)")
    
    if len(py_files) > 5:
        print(f"   ... et {len(py_files) - 5} autres fichiers")


def demonstrate_json_processing():
    """D√©montre le traitement JSON"""
    sample_data = {
        "application": "PyForgee Example",
        "version": "1.0.0",
        "features": [
            "Compilation Python-to-EXE",
            "Compression avanc√©e",
            "Protection du code",
            "Analyse de d√©pendances"
        ],
        "metadata": {
            "created_by": "PyForgee",
            "build_date": datetime.datetime.now().isoformat(),
            "target_platforms": ["Windows", "Linux", "macOS"]
        }
    }
    
    print("üìä Donn√©es JSON g√©n√©r√©es:")
    print(json.dumps(sample_data, indent=2, ensure_ascii=False))
    
    return sample_data


def calculate_fibonacci(n):
    """Calcule la s√©quence de Fibonacci (d√©montre les calculs)"""
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    
    fib_sequence = [0, 1]
    for i in range(2, n):
        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])
    
    return fib_sequence


def interactive_menu():
    """Menu interactif simple"""
    while True:
        print("\n" + "="*50)
        print("üöÄ PyForgee - Application d'Exemple")
        print("="*50)
        print("1. üñ•Ô∏è  Afficher les informations syst√®me")
        print("2. üìÅ Analyser les fichiers du r√©pertoire")
        print("3. üìä Traitement de donn√©es JSON")
        print("4. üî¢ Calculer Fibonacci")
        print("5. üß™ Test des imports")
        print("0. ‚ùå Quitter")
        print("-"*50)
        
        try:
            choice = input("Votre choix (0-5): ").strip()
            
            if choice == "0":
                print("üëã Au revoir!")
                break
            elif choice == "1":
                print("\nüñ•Ô∏è Informations Syst√®me:")
                info = get_system_info()
                for key, value in info.items():
                    print(f"   {key}: {value}")
            
            elif choice == "2":
                print("\nüìÅ Analyse des Fichiers:")
                process_file_operations()
            
            elif choice == "3":
                print("\nüìä Traitement JSON:")
                data = demonstrate_json_processing()
                print(f"\n‚úÖ {len(data)} entr√©es trait√©es avec succ√®s!")
            
            elif choice == "4":
                try:
                    n = int(input("\nNombre d'√©l√©ments Fibonacci √† calculer: "))
                    if n > 50:
                        print("‚ö†Ô∏è Limit√© √† 50 √©l√©ments maximum")
                        n = 50
                    
                    fib_result = calculate_fibonacci(n)
                    print(f"\nüî¢ S√©quence Fibonacci ({n} √©l√©ments):")
                    print(f"   {fib_result}")
                    
                except ValueError:
                    print("‚ùå Veuillez entrer un nombre valide")
            
            elif choice == "5":
                print("\nüß™ Test des Imports:")
                test_imports()
            
            else:
                print("‚ùå Choix invalide. Veuillez choisir entre 0-5.")
        
        except KeyboardInterrupt:
            print("\n\nüëã Interruption d√©tect√©e. Au revoir!")
            break
        except EOFError:
            print("\n\nüëã Fin d'entr√©e d√©tect√©e. Au revoir!")
            break


def test_imports():
    """Teste diff√©rents types d'imports pour l'analyse de d√©pendances"""
    
    print("   üì¶ Test des imports standards...")
    
    # Imports standard library
    try:
        import urllib.request
        print("   ‚úÖ urllib.request - OK")
    except ImportError as e:
        print(f"   ‚ùå urllib.request - {e}")
    
    try:
        import hashlib
        data = "PyForgee Test".encode()
        hash_result = hashlib.md5(data).hexdigest()
        print(f"   ‚úÖ hashlib - OK (MD5: {hash_result[:8]}...)")
    except ImportError as e:
        print(f"   ‚ùå hashlib - {e}")
    
    try:
        import collections
        counter = collections.Counter("PyForgee")
        print(f"   ‚úÖ collections - OK (Counter: {dict(counter)})")
    except ImportError as e:
        print(f"   ‚ùå collections - {e}")
    
    # Test d'imports optionnels (third-party)
    optional_modules = {
        'requests': 'Biblioth√®que HTTP populaire',
        'numpy': 'Calcul scientifique',
        'pandas': 'Manipulation de donn√©es',
        'PIL': 'Traitement d\'images (Pillow)',
    }
    
    print("\n   üì¶ Test des imports optionnels...")
    
    for module, description in optional_modules.items():
        try:
            __import__(module)
            print(f"   ‚úÖ {module} - OK ({description})")
        except ImportError:
            print(f"   ‚ö†Ô∏è {module} - Non disponible ({description})")


def main():
    """Fonction principale"""
    print("üöÄ D√©marrage de l'application d'exemple PyForgee...")
    print("üìù Cette application d√©montre diverses fonctionnalit√©s Python")
    print("üîß Compil√©e avec PyForgee pour cr√©er un ex√©cutable optimis√©")
    
    # V√©rifie si on est en mode interactif ou non
    if len(sys.argv) > 1:
        if sys.argv[1] == "--version":
            print("PyForgee Example App v1.0.0")
            return
        elif sys.argv[1] == "--info":
            print("\n‚ÑπÔ∏è Informations de l'application:")
            info = get_system_info()
            for key, value in info.items():
                print(f"  {key}: {value}")
            return
        elif sys.argv[1] == "--test":
            print("\nüß™ Mode test rapide:")
            test_imports()
            print("\n‚úÖ Tests termin√©s!")
            return
        elif sys.argv[1] == "--help":
            print("\nüìñ Utilisation:")
            print("  python simple_app.py           - Mode interactif")
            print("  python simple_app.py --version - Affiche la version")
            print("  python simple_app.py --info    - Infos syst√®me")
            print("  python simple_app.py --test    - Tests rapides")
            print("  python simple_app.py --help    - Cette aide")
            return
    
    # Mode interactif par d√©faut
    try:
        interactive_menu()
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        print("üîç V√©rifiez la configuration de votre environnement")
        sys.exit(1)


if __name__ == "__main__":
    main()